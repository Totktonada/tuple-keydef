name: fast_testing

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  linux:
    # We want to run on external PRs, but not on our own internal
    # PRs as they'll be run by the push to the branch.
    #
    # The main trick is described here:
    # https://github.com/Dart-Code/Dart-Code/pull/2375
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    strategy:
      fail-fast: false
      matrix:
        tarantool:
          - '1.10'
          - '2.4'
          - '2.5'
          - '2.6'
          - '2.7'
          - '2.8'
          - '2.10'
        build_flow:
          - 'cmake_and_make'
          - 'luarocks'

    runs-on: ubuntu-20.04
    steps:
      - name: Install tarantool ${{ matrix.tarantool }}
        uses: tarantool/setup-tarantool@v1
        with:
          tarantool-version: ${{ matrix.tarantool }}

      - name: Clone the module
        uses: actions/checkout@v2

      # A developer of the module usually calls `cmake . && make`
      # or something similar. Here we ensure that this build flow
      # is fine.
      #
      # Debug is a default build type, so compiler warnings are
      # interpreted as errors here.
      - name: Build using cmake and run testing
        run: |
          cmake .
          make
          make ARGS=-VV test
        if: matrix.build_flow == 'cmake_and_make'

      # A user usually calls `tarantoolctl rocks install
      # <module_name> [<version>]`. Here we imitate this build
      # flow using `tarantoolctl rocks make`, which is like the
      # former, but uses a locally cloned repository.
      #
      # RelWithDebInfo build type is used under the hood, so
      # compiler warnings are just warnings: they do not fail the
      # build.
      - name: Build using luarocks and run testing
        run: |
          tarantoolctl rocks make
          make -C build.luarocks/ ARGS=-VV test
        if: matrix.build_flow == 'luarocks'
